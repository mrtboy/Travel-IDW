#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('travelagency:server');
var http = require('http');
var socket = require('socket.io');
var add = require('../db/db.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

global.io = socket(server);

app.set(io);


io.on('connection', function (socket) {
  console.log("CONNECTED SOCKET");

  socket.on('submitPackage', function (data) {
    try {
      if (data !== undefined) {
        add(data);
        mySqlConnection.query("SELECT * FROM a_package", function (err, result, fields) {
          if (err) throw err;
          io.sockets.emit('getPackage', result);
        })
      } else {
        socket.emit('submitPackage', "No DATA");
      }
    } catch (e) {
      socket.emit('submitPackage', "Something goes wrong");
    }
  });

  socket.on('deletePacakge', function (data) {
    try{
      var sql = `DELETE FROM a_package WHERE id = ${data.id}`;
      console.log(sql);
      mySqlConnection.query(sql, function (err, result) {
        if (err) throw err;
        console.log("1 record deleted");
      });
      mySqlConnection.query("SELECT * FROM a_package", function (err, result, fields) {
        if (err) throw err;
        io.sockets.emit('getPackage', result);
      })
    } catch(e){
      io.sockets.emit('deletePacakge', e);
    }
    
  });

  mySqlConnection.query("SELECT * FROM a_package", function (err, result, fields) {
    if (err) throw err;
    io.sockets.emit('getPackage', result);
  })
})